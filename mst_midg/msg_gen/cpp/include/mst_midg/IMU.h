/* Auto-generated by genmsg_cpp for file /home/jschmidt/ros/Jomegatron_IGVC/mst_midg/msg/IMU.msg */
#ifndef MST_MIDG_MESSAGE_IMU_H
#define MST_MIDG_MESSAGE_IMU_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace mst_midg
{
template <class ContainerAllocator>
struct IMU_ {
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
  : latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , heading(0.0)
  , speed(0.0)
  , angular_rate(0.0)
  , gps_time(0.0)
  , position_valid(false)
  , heading_valid(false)
  , speed_valid(false)
  , angular_rate_valid(false)
  , position_accuracy(0.0)
  {
  }

  IMU_(const ContainerAllocator& _alloc)
  : latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , heading(0.0)
  , speed(0.0)
  , angular_rate(0.0)
  , gps_time(0.0)
  , position_valid(false)
  , heading_valid(false)
  , speed_valid(false)
  , angular_rate_valid(false)
  , position_accuracy(0.0)
  {
  }

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;

  typedef double _altitude_type;
  double altitude;

  typedef double _heading_type;
  double heading;

  typedef double _speed_type;
  double speed;

  typedef double _angular_rate_type;
  double angular_rate;

  typedef double _gps_time_type;
  double gps_time;

  typedef uint8_t _position_valid_type;
  uint8_t position_valid;

  typedef uint8_t _heading_valid_type;
  uint8_t heading_valid;

  typedef uint8_t _speed_valid_type;
  uint8_t speed_valid;

  typedef uint8_t _angular_rate_valid_type;
  uint8_t angular_rate_valid;

  typedef double _position_accuracy_type;
  double position_accuracy;


  typedef boost::shared_ptr< ::mst_midg::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mst_midg::IMU_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IMU
typedef  ::mst_midg::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::mst_midg::IMU> IMUPtr;
typedef boost::shared_ptr< ::mst_midg::IMU const> IMUConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mst_midg::IMU_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mst_midg::IMU_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mst_midg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mst_midg::IMU_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mst_midg::IMU_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mst_midg::IMU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "24a707f7b1bd25df70e9c37ca3771892";
  }

  static const char* value(const  ::mst_midg::IMU_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x24a707f7b1bd25dfULL;
  static const uint64_t static_value2 = 0x70e9c37ca3771892ULL;
};

template<class ContainerAllocator>
struct DataType< ::mst_midg::IMU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mst_midg/IMU";
  }

  static const char* value(const  ::mst_midg::IMU_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mst_midg::IMU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64     latitude\n\
float64     longitude\n\
float64     altitude\n\
float64     heading\n\
float64     speed\n\
float64     angular_rate\n\
float64     gps_time\n\
bool        position_valid\n\
bool        heading_valid\n\
bool        speed_valid\n\
bool        angular_rate_valid\n\
float64     position_accuracy\n\
\n\
";
  }

  static const char* value(const  ::mst_midg::IMU_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mst_midg::IMU_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mst_midg::IMU_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitude);
    stream.next(m.longitude);
    stream.next(m.altitude);
    stream.next(m.heading);
    stream.next(m.speed);
    stream.next(m.angular_rate);
    stream.next(m.gps_time);
    stream.next(m.position_valid);
    stream.next(m.heading_valid);
    stream.next(m.speed_valid);
    stream.next(m.angular_rate_valid);
    stream.next(m.position_accuracy);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IMU_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mst_midg::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mst_midg::IMU_<ContainerAllocator> & v) 
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "angular_rate: ";
    Printer<double>::stream(s, indent + "  ", v.angular_rate);
    s << indent << "gps_time: ";
    Printer<double>::stream(s, indent + "  ", v.gps_time);
    s << indent << "position_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_valid);
    s << indent << "heading_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heading_valid);
    s << indent << "speed_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_valid);
    s << indent << "angular_rate_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.angular_rate_valid);
    s << indent << "position_accuracy: ";
    Printer<double>::stream(s, indent + "  ", v.position_accuracy);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MST_MIDG_MESSAGE_IMU_H

